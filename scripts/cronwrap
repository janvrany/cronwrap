#!/usr/bin/env python

__VERSION__ = '2.0.3'

import sys
import re
import os
import argparse
import tempfile
import time
import platform
import subprocess
import threading
from datetime import datetime, timedelta


#--- Handlers ----------------------------------------------
def handle_args(sys_args):
    """Handles comamnds that are parsed via argparse."""
    if sys_args.verbose is not False:
        sys_args.verbose = True

    if sys_args.cmd:

        cmd = Command(sys_args.cmd, True)

        time_exceeded = False
        while cmd.is_running():
            print_str(sys_args, "Command still running...")

            # determine if we've exceeded the timeout (-t) value
            if sys_args.time is not None and not time_exceeded and is_time_exceeded(sys_args.time, cmd.start_time):
                time_exceeded = True
                print_str(sys_args, "Time window exceeded!")

                handle_time_exceeded(sys_args, cmd.start_time)

                # kill the process if the kill (-k) argument is set
                if sys_args.kill:
                    kill_process(sys_args, cmd)

            # determine if we've exceeded the killtime (-kt) value
            if sys_args.killtime is not None and is_time_exceeded(sys_args.killtime, cmd.start_time):
                print_str(sys_args, "Kill-time window exceeded!")
                kill_process(sys_args, cmd)

        if not cmd.is_running():
            print_str(sys_args, "Command finished, Run time (sec): %s" % cmd.run_time)

        if cmd.returncode == -9:
            handle_kill(sys_args, cmd)
        elif cmd.returncode != 0:
            handle_error(sys_args, cmd)
        else:
            handle_success(sys_args, cmd)
    elif sys_args.emails:
        handle_test_email(sys_args)


def handle_success(sys_args, cmd):
    """Called if a command did finish successfuly."""
    out_str = render_email_template(
        'CRONWRAP RAN COMMAND SUCCESSFULLY:',
        sys_args,
        cmd
    )

    if sys_args.verbose:
        if sys_args.emails:
            send_email(sys_args,
                       sys_args.emails,
                       'Host %s: cronwrap ran command successfully!'
                       % platform.node().capitalize(),
                       out_str)
        else:
            print_str(sys_args, out_str)


def handle_timeout(sys_args, cmd):
    """Called if a command exceeds its running time."""
    err_str = render_email_template(
        "CRONWRAP DETECTED A TIMEOUT ON FOLLOWING COMMAND:",
        sys_args,
        cmd
    )

    if sys_args.emails:
        send_email(sys_args,
                   sys_args.emails,
                   'Host %s: cronwrap detected a timeout!'
                   % platform.node().capitalize(),
                   err_str)
    else:
        print_str(sys_args, err_str)


def handle_time_exceeded(sys_args, start_time):
    """Called if a command exceeds its running time."""
    err_str = render_time_exceeded_template(
        "CRONWRAP DETECTED A TIME WINDOW HAS BEEN EXCEEDED ON FOLLOWING COMMAND:",
        sys_args,
        start_time
    )

    if sys_args.emails:
        send_email(sys_args,
                   sys_args.emails,
                   'Host %s: cronwrap detected a time window has been exceeded!'
                   % platform.node().capitalize(),
                   err_str)
    else:
        print_str(sys_args, err_str)


def handle_error(sys_args, cmd):
    """Called when a command did not finish successfully."""
    err_str = render_email_template(
        "CRONWRAP DETECTED FAILURE OR ERROR OUTPUT FOR THE COMMAND:",
        sys_args,
        cmd
    )

    if sys_args.emails:
        send_email(sys_args,
                   sys_args.emails,
                   'Host %s: cronwrap detected a failure!'
                   % platform.node().capitalize(),
                   err_str)
    else:
        print_str(sys_args, err_str)

    if sys_args.retry:
        print_str(sys_args, "Failure detected, retrying...")
        handle_args(sys_args)
    else:
        sys.exit(-1)

def handle_kill(sys_args, cmd):
    """Called when a command did not finish successfully."""
    err_str = render_email_template(
        "CRONWRAP HAS KILLED A LONG-RUNNING COMMAND:",
        sys_args,
        cmd
    )

    if sys_args.emails:
        send_email(sys_args,
                   sys_args.emails,
                   'Host %s: cronwrap killed a long-running command!!'
                   % platform.node().capitalize(),
                   err_str)
    else:
        print_str(sys_args, err_str)

    if sys_args.retry:
        print_str(sys_args, "Killed long-running command, retrying...")
        handle_args(sys_args)
    else:
        sys.exit(-1)


def render_time_exceeded_template(title, sys_args, start_time):
    run_time = int(time.time() - start_time)
    result_str = []

    result_str.append(title)
    result_str.append('%s\n' % sys_args.cmd)

    result_str.append('COMMAND STARTED:')
    result_str.append('%s UTC\n' % (datetime.utcnow() -
                                    timedelta(seconds=run_time)))

    result_str.append('COMMAND HAS BEEN RUNNING FOR:')
    hours = run_time / 60 / 60
    if run_time < 60:
        hours = 0
    result_str.append('%d seconds (%.2f hours)\n' % (run_time, hours))

    result_str.append("COMMAND'S TIMEOUT IS SET AT:")
    result_str.append('%s\n' % sys_args.time)

    return '\n'.join(result_str)


def render_email_template(title, sys_args, cmd):
    result_str = []

    result_str.append(title)
    result_str.append('%s\n' % sys_args.cmd)

    result_str.append('COMMAND STARTED:')
    result_str.append('%s UTC\n' % (datetime.utcnow() -
                                    timedelta(seconds=int(cmd.run_time))))

    result_str.append('COMMAND FINISHED:')
    result_str.append('%s UTC\n' % datetime.utcnow())

    result_str.append('COMMAND RAN FOR:')
    hours = cmd.run_time / 60 / 60
    if cmd.run_time < 60:
        hours = 0
    result_str.append('%d seconds (%.2f hours)\n' % (cmd.run_time, hours))

    result_str.append("COMMAND'S TIMEOUT IS SET AT:")
    result_str.append('%s\n' % sys_args.time)

    if sys_args.killtime is not None:
        result_str.append("COMMAND'S KILL TIMEOUT IS SET AT:")
        result_str.append('%s\n' % sys_args.killtime)

    result_str.append('RETURN CODE WAS:')
    result_str.append('%s\n' % cmd.returncode)

    result_str.append('ERROR OUTPUT:')
    result_str.append('%s\n' % trim_if_needed(cmd.stderr))

    result_str.append('STANDARD OUTPUT:')
    result_str.append('%s' % trim_if_needed(cmd.stdout))

    return '\n'.join(result_str)


def handle_test_email(sys_args):
    send_email(sys_args,
               sys_args.emails,
               'Host %s: cronwrap test mail'
               % platform.node().capitalize(),
               'just a test mail, yo! :)')


#--- Util ----------------------------------------------
class Command:

    """Runs a command, only works on Unix.

       Example of usage::

           cmd = Command('ls')
           print cmd.stdout
           print cmd.stderr
           print cmd.returncode
           print cmd.run_time
    """
    def __init__(self, command, threaded=False):
        self.command = command
        self.threaded = threaded
        self.returncode = 0
        self.start_time = time.time()
        self.process = None
        self.stderr = None
        self.stdout = None
        self.run_time = 0

        if threaded:
            self.task = threading.Thread(target=self.start_process)
            self.task.start()
        else:
            self.start_process()

    def start_process(self):
        self.process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        self.process.wait()
        self.returncode = self.process.returncode
        self.stderr = self.process.stderr.read()
        self.stdout = self.process.stdout.read()
        self.run_time = int(time.time() - self.start_time)

    def is_running(self):
        if self.threaded:
            time.sleep(1)
            return self.task.isAlive()

        return False


def send_email(sys_args, emails, subject, message):
    """Sends an email via `mail`."""
    emails = emails.split(',')

    erd, err_report = tempfile.mkstemp()
    fp_err_report = open(err_report, "w")
    fp_err_report.write(message)
    fp_err_report.close()

    try:
        for email in emails:
            cmd = Command('mail -s "%s" %s < %s' %
                          (subject.replace('"', "'"),
                           email,
                           err_report)
                          )

            if cmd.returncode == 0:
                print_str(sys_args, 'Sent an email to %s' % email)
            else:
                print_str(sys_args, 'Could not send an email to %s' % email)
                print_str(sys_args, trim_if_needed(cmd.stderr))

        print_str(sys_args, message)
    finally:
        os.remove(err_report)


def is_time_exceeded(timeout_time, start_time):
    """Returns `True` if the command's run time has exceeded the maximum
    run time specified in command arguments. Else `False  is returned."""
    cmd_time = int(time.time() - start_time)

    #Parse sys_args.time
    max_time = timeout_time
    sp = re.match("(\d+)([hms])", max_time).groups()
    t_val, t_unit = int(sp[0]), sp[1]

    #Convert time to seconds
    if t_unit == 'h':
        t_val = t_val * 60 * 60
    elif t_unit == 'm':
        t_val = t_val * 60

    return cmd_time > t_val


def trim_if_needed(txt, max_length=10000):
    if len(txt) > max_length:
        return '... START TRUNCATED...\n%s' % txt[-max_length:]
    else:
        return txt


def kill_process(sys_args, cmd):
    print_str(sys_args, "Killing pid %s" % cmd.process.pid)

    if cmd is not None and cmd.process is not None:
        try:
            cmd.process.kill()
        except:
            print_str(sys_args, "Error attempting to kill pid %s" % cmd.process.pid)


def print_str(sys_args, str):
    if sys_args.verbose:
        print('[%s] %s' % (datetime.utcnow().replace(microsecond=0), str))


def mail_to_default():
    if 'MAILTO' in os.environ:
        return os.environ['MAILTO']


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="A cron job wrapper that wraps jobs and enables better error reporting and command timeouts. Version %s" % __VERSION__)

    parser.add_argument('-c', '--cmd', help='Run a command. Could be `cronwrap -c "ls -la"`.')

    parser.add_argument('-e', '--emails', default=mail_to_default(),
                        help='Email following users if the command crashes or exceeds timeout. '
                        'Could be `cronwrap -e "johndoe@mail.com, marcy@mail.com"`. '
                        "Uses system's `mail` to send emails. If no command (cmd) is set a test email is sent.")

    parser.add_argument('-t', '--time',
                        help='Set the maximum running time.'
                        'If this time is passed an alert email will be sent.'
                        "The command will keep running even if maximum running time is exceeded."
                        "Possible values include: `-t 2h`,`-t 2m`, `-t 30s`."
                        )

    parser.add_argument('-k', '--kill', default=False, action='store_true',
                        help='Kill the process if the maximum running time is exceeded. '
                        'This argument will only apply when the -t (or --time) argument is set.'
                        )

    parser.add_argument('-kt', '--killtime',
                        help='Kill the process when on a separate specified time limit. '
                        'This argument is separate / standalone from the -t (--time) argument.'
                        'Possible values include: `-kt 2h`,`-kt 2m`, `-kt 30s`.'
                        )

    parser.add_argument('-r', '--retry', default=False, action='store_true',
                        help='Retry when the command errors out.')

    parser.add_argument('-v', '--verbose', default=False, action='store_true',
                        help='Send an email / print to stdout on successful run.')

    handle_args(parser.parse_args())
